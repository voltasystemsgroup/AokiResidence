/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron Electronics/MCM
System Name:
System Number:
Programmer: CRR/Otake
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Marantz BD7004 Processor"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "17" // Transport Decks
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT CommandSent;
DIGITAL_INPUT Acked;  
BUFFER_INPUT FromDevice$[255]; 

DIGITAL_OUTPUT TimedOut;
DIGITAL_OUTPUT PleaseWait;
DIGITAL_OUTPUT AckIn;
ANALOG_OUTPUT DiscTypeOut;
ANALOG_OUTPUT StatusOut;
ANALOG_OUTPUT PlayModeOut; 
ANALOG_OUTPUT TitleOut; 
ANALOG_OUTPUT ChapterOut; 
ANALOG_OUTPUT TimeOut;
ANALOG_OUTPUT LanguageOut;
ANALOG_OUTPUT SubtitleOut;
ANALOG_OUTPUT AngleOut;
ANALOG_OUTPUT TotalAngleOut; 

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
*******************************************************************************************/
INTEGER Semaphore, Hour, Minute, Second, Marker;
STRING TempString$[50];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH CommandSent
	{
	wait(100, CommandWait1)
		{
		PleaseWait = 1;
		wait(1200, CommandWait2)
	    	{
			TimedOut = 1;
			processlogic();
			TimedOut = 0;
			PleaseWait = 0;
			}
		}
	}
	
PUSH Acked
	{
	cancelallwait();
	PleaseWait = 0;
	}

CHANGE FromDevice$
	{
    If(Semaphore = 0)
    	{
    	Semaphore = 1;
    	While(Find("\x03", FromDevice$) > 0)
    		{
    		TempString$ = left(Remove("\x03", FromDevice$), 50);
    		Marker = find("\x02", TempString$);
    		Tempstring$ = Right(TempString$, len(Tempstring$) - Marker + 1);
    		Switch(Byte(Tempstring$, 2))
    			{
    			Case(48):
    				{
        			DiscTypeOut = Byte(Tempstring$, 4);
    				LanguageOut = Byte(Tempstring$, 7) - 48;
    				SubtitleOut = Byte(Tempstring$, 8) - 48;
    				AngleOut = atoi(mid(Tempstring$, 9, 1));
    				StatusOut = Byte(Tempstring$, 10);
    				PlayModeOut = Byte(Tempstring$, 11);
    				TitleOut = atoi(mid(Tempstring$, 12, 3));
    				ChapterOut = atoi(mid(Tempstring$, 15, 4));
    				Hour = atoi(mid(Tempstring$, 20, 2));
    				Minute = atoi(mid(Tempstring$, 22, 2));
    				Second = atoi(mid(Tempstring$, 24, 2));
    				TimeOut = Hour * 3600 + Minute * 60 + Second;
    				}
    			Case(75):
    				{
    				TotalAngleOut = atoi(mid(TempString$, 4, 1));
    				AngleOut = atoi(mid(TempString$, 5, 1));
    				AckIn = 1;
    				Processlogic();
    				AckIn = 0;
    				}
    			Default:
    				{
    				AckIn = 1;
    				Processlogic();
    				AckIn = 0;
    				}
    			}
    		}
    	Semaphore = 0;
    	}
    }

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
	{
    Semaphore = 0;
	}


